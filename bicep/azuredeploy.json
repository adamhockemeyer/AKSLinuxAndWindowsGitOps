{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "7550270691557961819"
    }
  },
  "parameters": {
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "aks-win-rg"
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]"
    },
    "lastUpdated": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    }
  },
  "variables": {
    "aksName": "[format('aks-{0}', uniqueString(parameters('resourceGroupName')))]",
    "tags": {
      "project": "AKSLinuxAndWindowsGitOps",
      "lastUpdated": "[parameters('lastUpdated')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2020-06-01",
      "name": "[parameters('resourceGroupName')]",
      "location": "[parameters('location')]",
      "properties": {},
      "tags": "[variables('tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aks",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "clusterName": {
            "value": "[variables('aksName')]"
          },
          "dnsPrefix": {
            "value": "[variables('aksName')]"
          },
          "location": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName')), '2020-06-01', 'full').location]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "6966418898135562943"
            }
          },
          "parameters": {
            "clusterName": {
              "type": "string",
              "defaultValue": "aks",
              "metadata": {
                "description": "The name of the Managed Cluster resource."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location of the Managed Cluster resource."
              }
            },
            "dnsPrefix": {
              "type": "string",
              "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
              }
            },
            "osDiskSizeGB": {
              "type": "int",
              "defaultValue": 40,
              "maxValue": 1023,
              "minValue": 0,
              "metadata": {
                "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
              }
            },
            "agentCount": {
              "type": "int",
              "defaultValue": 1,
              "maxValue": 50,
              "minValue": 1,
              "metadata": {
                "description": "The number of nodes for the cluster."
              }
            },
            "agentWindowsCount": {
              "type": "int",
              "defaultValue": 1,
              "maxValue": 100,
              "minValue": 1,
              "metadata": {
                "description": "The number of nodes for the cluster."
              }
            },
            "agentVMSize": {
              "type": "string",
              "defaultValue": "standard_d4s_v3",
              "metadata": {
                "description": "The size of the Virtual Machine for Linux nodes."
              }
            },
            "agentWindowsVMSize": {
              "type": "string",
              "defaultValue": "standard_d4s_v3",
              "metadata": {
                "description": "The size of the Virtual Machine for Windows nodes."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The tags to associate with the Managed Cluster resource."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerService/managedClusters",
              "apiVersion": "2023-02-02-preview",
              "name": "[parameters('clusterName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "kubernetesVersion": "1.25.6",
                "networkProfile": {
                  "networkPlugin": "azure",
                  "loadBalancerSku": "Standard",
                  "outboundType": "loadBalancer"
                },
                "addonProfiles": {
                  "azureKeyvaultSecretsProvider": {
                    "config": {
                      "enableSecretRotation": "true",
                      "rotationPollInterval": "2m"
                    },
                    "enabled": true
                  }
                },
                "agentPoolProfiles": [
                  {
                    "name": "systempool",
                    "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                    "osDiskType": "Ephemeral",
                    "count": "[parameters('agentCount')]",
                    "vmSize": "[parameters('agentVMSize')]",
                    "osType": "Linux",
                    "mode": "System",
                    "enableAutoScaling": true,
                    "minCount": 1,
                    "maxCount": 3
                  },
                  {
                    "name": "win01",
                    "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                    "osDiskType": "Ephemeral",
                    "count": "[parameters('agentWindowsCount')]",
                    "vmSize": "[parameters('agentWindowsVMSize')]",
                    "osType": "Windows",
                    "mode": "User",
                    "enableAutoScaling": true,
                    "minCount": 1,
                    "maxCount": 3
                  }
                ],
                "autoUpgradeProfile": {
                  "upgradeChannel": "stable"
                }
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "controlPlaneFQDN": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName')), '2023-02-02-preview').fqdn]"
            },
            "clusterName": {
              "type": "string",
              "value": "[parameters('clusterName')]"
            },
            "clusterPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName')), '2023-02-02-preview').identityProfile.kubeletidentity.objectId]"
            },
            "azureKeyVaultSecretsProviderPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName')), '2023-02-02-preview').addonProfiles.azureKeyvaultSecretsProvider.identity.objectId]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "acr",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "acrName": {
            "value": "[format('acr{0}', uniqueString(parameters('resourceGroupName')))]"
          },
          "location": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName')), '2020-06-01', 'full').location]"
          },
          "aksPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'aks'), '2022-09-01').outputs.clusterPrincipalId.value]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "7346536600243220675"
            }
          },
          "parameters": {
            "acrName": {
              "type": "string",
              "defaultValue": "[format('acr{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Provide a globally unique name of your Azure Container Registry"
              },
              "maxLength": 50,
              "minLength": 5
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Provide a location for the registry."
              }
            },
            "acrSku": {
              "type": "string",
              "defaultValue": "Basic",
              "metadata": {
                "description": "Provide a tier of your Azure Container Registry."
              },
              "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
              ]
            },
            "aksPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the AKS cluster"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags for the resources"
              }
            },
            "roleAcrPull": {
              "type": "string",
              "defaultValue": "7f951dda-4ed3-4680-a7ca-43fe172d538d",
              "metadata": {
                "description": "The role definition ID of the AcrPull role"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-01-01-preview",
              "name": "[parameters('acrName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('acrSku')]"
              },
              "properties": {
                "adminUserEnabled": false
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('acrName'))]",
              "name": "[guid(resourceGroup().id, parameters('acrName'), parameters('aksPrincipalId'), 'AssignAcrPullToAks')]",
              "properties": {
                "description": "Assign AcrPull role to AKS",
                "principalId": "[parameters('aksPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleAcrPull'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('acrName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'aks')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyVault",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('kv-{0}', uniqueString(parameters('resourceGroupName')))]"
          },
          "location": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName')), '2020-06-01', 'full').location]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "7522310342168955297"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location to use for the deployment. defaults to Resource Groups location."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "[format('kv-{0}', uniqueString(resourceGroup().id))]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "akvName": "[take(parameters('name'), 24)]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[variables('akvName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "enableRbacAuthorization": true
              },
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('akvName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyVaultRbac-aks-csi",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'keyVault'), '2022-09-01').outputs.name.value]"
          },
          "rbacSecretUserSps": {
            "value": [
              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'aks'), '2022-09-01').outputs.azureKeyVaultSecretsProviderPrincipalId.value]"
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "3154299031395597114"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "rbacSecretUserSps": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Service Principal IDs"
              }
            }
          },
          "variables": {
            "keyVaultSecretsUserRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]"
          },
          "resources": [
            {
              "copy": {
                "name": "rbacSecretUserSp",
                "count": "[length(parameters('rbacSecretUserSps'))]"
              },
              "condition": "[not(empty(parameters('rbacSecretUserSps')[copyIndex()]))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('rbacSecretUserSps')[copyIndex()], variables('keyVaultSecretsUserRole'))]",
              "properties": {
                "roleDefinitionId": "[variables('keyVaultSecretsUserRole')]",
                "principalType": "ServicePrincipal",
                "principalId": "[parameters('rbacSecretUserSps')[copyIndex()]]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'aks')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'keyVault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "fluxExtension",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "clusterName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'aks'), '2022-09-01').outputs.clusterName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "1255887665060103680"
            }
          },
          "parameters": {
            "clusterName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KubernetesConfiguration/extensions",
              "apiVersion": "2022-11-01",
              "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', parameters('clusterName'))]",
              "name": "flux",
              "properties": {
                "extensionType": "microsoft.flux",
                "scope": {
                  "cluster": {
                    "releaseNamespace": "flux-system"
                  }
                },
                "autoUpgradeMinorVersion": true
              }
            }
          ],
          "outputs": {
            "extensionName": {
              "type": "string",
              "value": "flux"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'aks')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "fluxConfig",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "clusterName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'aks'), '2022-09-01').outputs.clusterName.value]"
          },
          "fluxExtensionName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'fluxExtension'), '2022-09-01').outputs.extensionName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "4476473907949295976"
            }
          },
          "parameters": {
            "clusterName": {
              "type": "string"
            },
            "fluxExtensionName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KubernetesConfiguration/fluxConfigurations",
              "apiVersion": "2022-11-01",
              "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', parameters('clusterName'))]",
              "name": "cluster-config",
              "properties": {
                "scope": "cluster",
                "namespace": "cluster-config",
                "sourceKind": "GitRepository",
                "suspend": false,
                "gitRepository": {
                  "url": "https://github.com/adamhockemeyer/AKSLinuxAndWindowsGitOps",
                  "timeoutInSeconds": 600,
                  "syncIntervalInSeconds": 600,
                  "repositoryRef": {
                    "branch": "main"
                  }
                },
                "kustomizations": {
                  "infra": {
                    "path": "./flux-config/infrastructure",
                    "dependsOn": [],
                    "timeoutInSeconds": 1200,
                    "syncIntervalInSeconds": 600,
                    "prune": true
                  },
                  "mvc": {
                    "path": "./flux-config/apps/staging/eshop-mvc",
                    "dependsOn": [
                      "infra"
                    ],
                    "timeoutInSeconds": 600,
                    "syncIntervalInSeconds": 600,
                    "retryIntervalInSeconds": 600,
                    "prune": true
                  },
                  "wcf": {
                    "path": "./flux-config/apps/staging/eshop-wcf",
                    "dependsOn": [
                      "infra"
                    ],
                    "timeoutInSeconds": 600,
                    "syncIntervalInSeconds": 600,
                    "retryIntervalInSeconds": 600,
                    "prune": true
                  },
                  "webforms": {
                    "path": "./flux-config/apps/staging/eshop-webforms",
                    "dependsOn": [
                      "infra"
                    ],
                    "timeoutInSeconds": 600,
                    "syncIntervalInSeconds": 600,
                    "retryIntervalInSeconds": 600,
                    "prune": true
                  }
                }
              }
            }
          ],
          "outputs": {
            "fluxConfigRepo": {
              "type": "string",
              "value": "[reference(extensionResourceId(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/fluxConfigurations', 'cluster-config'), '2022-11-01').gitRepository.url]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'aks')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'fluxExtension')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    }
  ]
}